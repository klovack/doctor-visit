// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserIllnesses(t *testing.T) {
	t.Parallel()

	query := UserIllnesses()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserIllnessesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIllness{}
	if err = randomize.Struct(seed, o, userIllnessDBTypes, true, userIllnessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIllness struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserIllnesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserIllnessesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIllness{}
	if err = randomize.Struct(seed, o, userIllnessDBTypes, true, userIllnessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIllness struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserIllnesses().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserIllnesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserIllnessesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIllness{}
	if err = randomize.Struct(seed, o, userIllnessDBTypes, true, userIllnessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIllness struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserIllnessSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserIllnesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserIllnessesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIllness{}
	if err = randomize.Struct(seed, o, userIllnessDBTypes, true, userIllnessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIllness struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserIllnessExists(ctx, tx, o.UserIllnessID)
	if err != nil {
		t.Errorf("Unable to check if UserIllness exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserIllnessExists to return true, but got false.")
	}
}

func testUserIllnessesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIllness{}
	if err = randomize.Struct(seed, o, userIllnessDBTypes, true, userIllnessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIllness struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userIllnessFound, err := FindUserIllness(ctx, tx, o.UserIllnessID)
	if err != nil {
		t.Error(err)
	}

	if userIllnessFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserIllnessesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIllness{}
	if err = randomize.Struct(seed, o, userIllnessDBTypes, true, userIllnessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIllness struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserIllnesses().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserIllnessesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIllness{}
	if err = randomize.Struct(seed, o, userIllnessDBTypes, true, userIllnessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIllness struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserIllnesses().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserIllnessesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userIllnessOne := &UserIllness{}
	userIllnessTwo := &UserIllness{}
	if err = randomize.Struct(seed, userIllnessOne, userIllnessDBTypes, false, userIllnessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIllness struct: %s", err)
	}
	if err = randomize.Struct(seed, userIllnessTwo, userIllnessDBTypes, false, userIllnessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIllness struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userIllnessOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userIllnessTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserIllnesses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserIllnessesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userIllnessOne := &UserIllness{}
	userIllnessTwo := &UserIllness{}
	if err = randomize.Struct(seed, userIllnessOne, userIllnessDBTypes, false, userIllnessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIllness struct: %s", err)
	}
	if err = randomize.Struct(seed, userIllnessTwo, userIllnessDBTypes, false, userIllnessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIllness struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userIllnessOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userIllnessTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserIllnesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userIllnessBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserIllness) error {
	*o = UserIllness{}
	return nil
}

func userIllnessAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserIllness) error {
	*o = UserIllness{}
	return nil
}

func userIllnessAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserIllness) error {
	*o = UserIllness{}
	return nil
}

func userIllnessBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserIllness) error {
	*o = UserIllness{}
	return nil
}

func userIllnessAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserIllness) error {
	*o = UserIllness{}
	return nil
}

func userIllnessBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserIllness) error {
	*o = UserIllness{}
	return nil
}

func userIllnessAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserIllness) error {
	*o = UserIllness{}
	return nil
}

func userIllnessBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserIllness) error {
	*o = UserIllness{}
	return nil
}

func userIllnessAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserIllness) error {
	*o = UserIllness{}
	return nil
}

func testUserIllnessesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserIllness{}
	o := &UserIllness{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userIllnessDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserIllness object: %s", err)
	}

	AddUserIllnessHook(boil.BeforeInsertHook, userIllnessBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userIllnessBeforeInsertHooks = []UserIllnessHook{}

	AddUserIllnessHook(boil.AfterInsertHook, userIllnessAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userIllnessAfterInsertHooks = []UserIllnessHook{}

	AddUserIllnessHook(boil.AfterSelectHook, userIllnessAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userIllnessAfterSelectHooks = []UserIllnessHook{}

	AddUserIllnessHook(boil.BeforeUpdateHook, userIllnessBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userIllnessBeforeUpdateHooks = []UserIllnessHook{}

	AddUserIllnessHook(boil.AfterUpdateHook, userIllnessAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userIllnessAfterUpdateHooks = []UserIllnessHook{}

	AddUserIllnessHook(boil.BeforeDeleteHook, userIllnessBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userIllnessBeforeDeleteHooks = []UserIllnessHook{}

	AddUserIllnessHook(boil.AfterDeleteHook, userIllnessAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userIllnessAfterDeleteHooks = []UserIllnessHook{}

	AddUserIllnessHook(boil.BeforeUpsertHook, userIllnessBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userIllnessBeforeUpsertHooks = []UserIllnessHook{}

	AddUserIllnessHook(boil.AfterUpsertHook, userIllnessAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userIllnessAfterUpsertHooks = []UserIllnessHook{}
}

func testUserIllnessesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIllness{}
	if err = randomize.Struct(seed, o, userIllnessDBTypes, true, userIllnessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIllness struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserIllnesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserIllnessesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIllness{}
	if err = randomize.Struct(seed, o, userIllnessDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserIllness struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userIllnessColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserIllnesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserIllnessToManyVisits(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserIllness
	var b, c Visit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userIllnessDBTypes, true, userIllnessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIllness struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, visitDBTypes, false, visitColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, visitDBTypes, false, visitColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.UserIllnessID, a.UserIllnessID)
	queries.Assign(&c.UserIllnessID, a.UserIllnessID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Visits().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.UserIllnessID, b.UserIllnessID) {
			bFound = true
		}
		if queries.Equal(v.UserIllnessID, c.UserIllnessID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserIllnessSlice{&a}
	if err = a.L.LoadVisits(ctx, tx, false, (*[]*UserIllness)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Visits); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Visits = nil
	if err = a.L.LoadVisits(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Visits); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserIllnessToManyAddOpVisits(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserIllness
	var b, c, d, e Visit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userIllnessDBTypes, false, strmangle.SetComplement(userIllnessPrimaryKeyColumns, userIllnessColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Visit{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, visitDBTypes, false, strmangle.SetComplement(visitPrimaryKeyColumns, visitColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Visit{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVisits(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.UserIllnessID, first.UserIllnessID) {
			t.Error("foreign key was wrong value", a.UserIllnessID, first.UserIllnessID)
		}
		if !queries.Equal(a.UserIllnessID, second.UserIllnessID) {
			t.Error("foreign key was wrong value", a.UserIllnessID, second.UserIllnessID)
		}

		if first.R.UserIllness != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.UserIllness != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Visits[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Visits[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Visits().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUserIllnessToManySetOpVisits(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserIllness
	var b, c, d, e Visit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userIllnessDBTypes, false, strmangle.SetComplement(userIllnessPrimaryKeyColumns, userIllnessColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Visit{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, visitDBTypes, false, strmangle.SetComplement(visitPrimaryKeyColumns, visitColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetVisits(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Visits().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetVisits(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Visits().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.UserIllnessID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.UserIllnessID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.UserIllnessID, d.UserIllnessID) {
		t.Error("foreign key was wrong value", a.UserIllnessID, d.UserIllnessID)
	}
	if !queries.Equal(a.UserIllnessID, e.UserIllnessID) {
		t.Error("foreign key was wrong value", a.UserIllnessID, e.UserIllnessID)
	}

	if b.R.UserIllness != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.UserIllness != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.UserIllness != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.UserIllness != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Visits[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Visits[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testUserIllnessToManyRemoveOpVisits(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserIllness
	var b, c, d, e Visit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userIllnessDBTypes, false, strmangle.SetComplement(userIllnessPrimaryKeyColumns, userIllnessColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Visit{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, visitDBTypes, false, strmangle.SetComplement(visitPrimaryKeyColumns, visitColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddVisits(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Visits().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveVisits(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Visits().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.UserIllnessID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.UserIllnessID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.UserIllness != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.UserIllness != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.UserIllness != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.UserIllness != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Visits) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Visits[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Visits[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testUserIllnessToOneDoctorUsingDoctor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserIllness
	var foreign Doctor

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userIllnessDBTypes, true, userIllnessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIllness struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, doctorDBTypes, false, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.DoctorID, foreign.DoctorID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Doctor().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.DoctorID, foreign.DoctorID) {
		t.Errorf("want: %v, got %v", foreign.DoctorID, check.DoctorID)
	}

	slice := UserIllnessSlice{&local}
	if err = local.L.LoadDoctor(ctx, tx, false, (*[]*UserIllness)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Doctor == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Doctor = nil
	if err = local.L.LoadDoctor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Doctor == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserIllnessToOneIllnessUsingIllness(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserIllness
	var foreign Illness

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userIllnessDBTypes, true, userIllnessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIllness struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, illnessDBTypes, false, illnessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Illness struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.IllnessID, foreign.IllnessID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Illness().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.IllnessID, foreign.IllnessID) {
		t.Errorf("want: %v, got %v", foreign.IllnessID, check.IllnessID)
	}

	slice := UserIllnessSlice{&local}
	if err = local.L.LoadIllness(ctx, tx, false, (*[]*UserIllness)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Illness == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Illness = nil
	if err = local.L.LoadIllness(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Illness == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserIllnessToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserIllness
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userIllnessDBTypes, true, userIllnessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIllness struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserID, foreign.UserID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.UserID, foreign.UserID) {
		t.Errorf("want: %v, got %v", foreign.UserID, check.UserID)
	}

	slice := UserIllnessSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*UserIllness)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserIllnessToOneSetOpDoctorUsingDoctor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserIllness
	var b, c Doctor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userIllnessDBTypes, false, strmangle.SetComplement(userIllnessPrimaryKeyColumns, userIllnessColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, doctorDBTypes, false, strmangle.SetComplement(doctorPrimaryKeyColumns, doctorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, doctorDBTypes, false, strmangle.SetComplement(doctorPrimaryKeyColumns, doctorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Doctor{&b, &c} {
		err = a.SetDoctor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Doctor != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserIllnesses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.DoctorID, x.DoctorID) {
			t.Error("foreign key was wrong value", a.DoctorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DoctorID))
		reflect.Indirect(reflect.ValueOf(&a.DoctorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.DoctorID, x.DoctorID) {
			t.Error("foreign key was wrong value", a.DoctorID, x.DoctorID)
		}
	}
}

func testUserIllnessToOneRemoveOpDoctorUsingDoctor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserIllness
	var b Doctor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userIllnessDBTypes, false, strmangle.SetComplement(userIllnessPrimaryKeyColumns, userIllnessColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, doctorDBTypes, false, strmangle.SetComplement(doctorPrimaryKeyColumns, doctorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetDoctor(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveDoctor(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Doctor().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Doctor != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.DoctorID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.UserIllnesses) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testUserIllnessToOneSetOpIllnessUsingIllness(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserIllness
	var b, c Illness

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userIllnessDBTypes, false, strmangle.SetComplement(userIllnessPrimaryKeyColumns, userIllnessColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, illnessDBTypes, false, strmangle.SetComplement(illnessPrimaryKeyColumns, illnessColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, illnessDBTypes, false, strmangle.SetComplement(illnessPrimaryKeyColumns, illnessColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Illness{&b, &c} {
		err = a.SetIllness(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Illness != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserIllnesses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.IllnessID, x.IllnessID) {
			t.Error("foreign key was wrong value", a.IllnessID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IllnessID))
		reflect.Indirect(reflect.ValueOf(&a.IllnessID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.IllnessID, x.IllnessID) {
			t.Error("foreign key was wrong value", a.IllnessID, x.IllnessID)
		}
	}
}

func testUserIllnessToOneRemoveOpIllnessUsingIllness(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserIllness
	var b Illness

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userIllnessDBTypes, false, strmangle.SetComplement(userIllnessPrimaryKeyColumns, userIllnessColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, illnessDBTypes, false, strmangle.SetComplement(illnessPrimaryKeyColumns, illnessColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetIllness(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveIllness(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Illness().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Illness != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.IllnessID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.UserIllnesses) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testUserIllnessToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserIllness
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userIllnessDBTypes, false, strmangle.SetComplement(userIllnessPrimaryKeyColumns, userIllnessColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserIllnesses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserID, x.UserID) {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserID, x.UserID) {
			t.Error("foreign key was wrong value", a.UserID, x.UserID)
		}
	}
}

func testUserIllnessToOneRemoveOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserIllness
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userIllnessDBTypes, false, strmangle.SetComplement(userIllnessPrimaryKeyColumns, userIllnessColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.User().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.User != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UserID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.UserIllnesses) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testUserIllnessesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIllness{}
	if err = randomize.Struct(seed, o, userIllnessDBTypes, true, userIllnessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIllness struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserIllnessesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIllness{}
	if err = randomize.Struct(seed, o, userIllnessDBTypes, true, userIllnessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIllness struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserIllnessSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserIllnessesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIllness{}
	if err = randomize.Struct(seed, o, userIllnessDBTypes, true, userIllnessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIllness struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserIllnesses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userIllnessDBTypes = map[string]string{`UserIllnessID`: `integer`, `IllnessID`: `integer`, `From`: `date`, `To`: `date`, `Notes`: `character varying`, `DoctorID`: `integer`, `UserID`: `integer`}
	_                  = bytes.MinRead
)

func testUserIllnessesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userIllnessPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userIllnessAllColumns) == len(userIllnessPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserIllness{}
	if err = randomize.Struct(seed, o, userIllnessDBTypes, true, userIllnessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIllness struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserIllnesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userIllnessDBTypes, true, userIllnessPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserIllness struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserIllnessesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userIllnessAllColumns) == len(userIllnessPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserIllness{}
	if err = randomize.Struct(seed, o, userIllnessDBTypes, true, userIllnessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIllness struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserIllnesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userIllnessDBTypes, true, userIllnessPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserIllness struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userIllnessAllColumns, userIllnessPrimaryKeyColumns) {
		fields = userIllnessAllColumns
	} else {
		fields = strmangle.SetComplement(
			userIllnessAllColumns,
			userIllnessPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserIllnessSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserIllnessesUpsert(t *testing.T) {
	t.Parallel()

	if len(userIllnessAllColumns) == len(userIllnessPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserIllness{}
	if err = randomize.Struct(seed, &o, userIllnessDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserIllness struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserIllness: %s", err)
	}

	count, err := UserIllnesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userIllnessDBTypes, false, userIllnessPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserIllness struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserIllness: %s", err)
	}

	count, err = UserIllnesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
