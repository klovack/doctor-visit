// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Illness is an object representing the database table.
type Illness struct {
	IllnessID int         `boil:"illness_id" json:"illness_id" toml:"illness_id" yaml:"illness_id"`
	Name      null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Risk      null.Int    `boil:"risk" json:"risk,omitempty" toml:"risk" yaml:"risk,omitempty"`

	R *illnessR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L illnessL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IllnessColumns = struct {
	IllnessID string
	Name      string
	Risk      string
}{
	IllnessID: "illness_id",
	Name:      "name",
	Risk:      "risk",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var IllnessWhere = struct {
	IllnessID whereHelperint
	Name      whereHelpernull_String
	Risk      whereHelpernull_Int
}{
	IllnessID: whereHelperint{field: "\"illness\".\"illness_id\""},
	Name:      whereHelpernull_String{field: "\"illness\".\"name\""},
	Risk:      whereHelpernull_Int{field: "\"illness\".\"risk\""},
}

// IllnessRels is where relationship names are stored.
var IllnessRels = struct {
	UserIllnesses string
}{
	UserIllnesses: "UserIllnesses",
}

// illnessR is where relationships are stored.
type illnessR struct {
	UserIllnesses UserIllnessSlice
}

// NewStruct creates a new relationship struct
func (*illnessR) NewStruct() *illnessR {
	return &illnessR{}
}

// illnessL is where Load methods for each relationship are stored.
type illnessL struct{}

var (
	illnessAllColumns            = []string{"illness_id", "name", "risk"}
	illnessColumnsWithoutDefault = []string{"name", "risk"}
	illnessColumnsWithDefault    = []string{"illness_id"}
	illnessPrimaryKeyColumns     = []string{"illness_id"}
)

type (
	// IllnessSlice is an alias for a slice of pointers to Illness.
	// This should generally be used opposed to []Illness.
	IllnessSlice []*Illness
	// IllnessHook is the signature for custom Illness hook methods
	IllnessHook func(context.Context, boil.ContextExecutor, *Illness) error

	illnessQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	illnessType                 = reflect.TypeOf(&Illness{})
	illnessMapping              = queries.MakeStructMapping(illnessType)
	illnessPrimaryKeyMapping, _ = queries.BindMapping(illnessType, illnessMapping, illnessPrimaryKeyColumns)
	illnessInsertCacheMut       sync.RWMutex
	illnessInsertCache          = make(map[string]insertCache)
	illnessUpdateCacheMut       sync.RWMutex
	illnessUpdateCache          = make(map[string]updateCache)
	illnessUpsertCacheMut       sync.RWMutex
	illnessUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var illnessBeforeInsertHooks []IllnessHook
var illnessBeforeUpdateHooks []IllnessHook
var illnessBeforeDeleteHooks []IllnessHook
var illnessBeforeUpsertHooks []IllnessHook

var illnessAfterInsertHooks []IllnessHook
var illnessAfterSelectHooks []IllnessHook
var illnessAfterUpdateHooks []IllnessHook
var illnessAfterDeleteHooks []IllnessHook
var illnessAfterUpsertHooks []IllnessHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Illness) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range illnessBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Illness) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range illnessBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Illness) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range illnessBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Illness) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range illnessBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Illness) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range illnessAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Illness) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range illnessAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Illness) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range illnessAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Illness) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range illnessAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Illness) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range illnessAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddIllnessHook registers your hook function for all future operations.
func AddIllnessHook(hookPoint boil.HookPoint, illnessHook IllnessHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		illnessBeforeInsertHooks = append(illnessBeforeInsertHooks, illnessHook)
	case boil.BeforeUpdateHook:
		illnessBeforeUpdateHooks = append(illnessBeforeUpdateHooks, illnessHook)
	case boil.BeforeDeleteHook:
		illnessBeforeDeleteHooks = append(illnessBeforeDeleteHooks, illnessHook)
	case boil.BeforeUpsertHook:
		illnessBeforeUpsertHooks = append(illnessBeforeUpsertHooks, illnessHook)
	case boil.AfterInsertHook:
		illnessAfterInsertHooks = append(illnessAfterInsertHooks, illnessHook)
	case boil.AfterSelectHook:
		illnessAfterSelectHooks = append(illnessAfterSelectHooks, illnessHook)
	case boil.AfterUpdateHook:
		illnessAfterUpdateHooks = append(illnessAfterUpdateHooks, illnessHook)
	case boil.AfterDeleteHook:
		illnessAfterDeleteHooks = append(illnessAfterDeleteHooks, illnessHook)
	case boil.AfterUpsertHook:
		illnessAfterUpsertHooks = append(illnessAfterUpsertHooks, illnessHook)
	}
}

// One returns a single illness record from the query.
func (q illnessQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Illness, error) {
	o := &Illness{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for illness")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Illness records from the query.
func (q illnessQuery) All(ctx context.Context, exec boil.ContextExecutor) (IllnessSlice, error) {
	var o []*Illness

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Illness slice")
	}

	if len(illnessAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Illness records in the query.
func (q illnessQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count illness rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q illnessQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if illness exists")
	}

	return count > 0, nil
}

// UserIllnesses retrieves all the user_illness's UserIllnesses with an executor.
func (o *Illness) UserIllnesses(mods ...qm.QueryMod) userIllnessQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_illness\".\"illness_id\"=?", o.IllnessID),
	)

	query := UserIllnesses(queryMods...)
	queries.SetFrom(query.Query, "\"user_illness\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_illness\".*"})
	}

	return query
}

// LoadUserIllnesses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (illnessL) LoadUserIllnesses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIllness interface{}, mods queries.Applicator) error {
	var slice []*Illness
	var object *Illness

	if singular {
		object = maybeIllness.(*Illness)
	} else {
		slice = *maybeIllness.(*[]*Illness)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &illnessR{}
		}
		args = append(args, object.IllnessID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &illnessR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.IllnessID) {
					continue Outer
				}
			}

			args = append(args, obj.IllnessID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`user_illness`), qm.WhereIn(`illness_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_illness")
	}

	var resultSlice []*UserIllness
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_illness")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_illness")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_illness")
	}

	if len(userIllnessAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserIllnesses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userIllnessR{}
			}
			foreign.R.Illness = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.IllnessID, foreign.IllnessID) {
				local.R.UserIllnesses = append(local.R.UserIllnesses, foreign)
				if foreign.R == nil {
					foreign.R = &userIllnessR{}
				}
				foreign.R.Illness = local
				break
			}
		}
	}

	return nil
}

// AddUserIllnesses adds the given related objects to the existing relationships
// of the illness, optionally inserting them as new records.
// Appends related to o.R.UserIllnesses.
// Sets related.R.Illness appropriately.
func (o *Illness) AddUserIllnesses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserIllness) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.IllnessID, o.IllnessID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_illness\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"illness_id"}),
				strmangle.WhereClause("\"", "\"", 2, userIllnessPrimaryKeyColumns),
			)
			values := []interface{}{o.IllnessID, rel.UserIllnessID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.IllnessID, o.IllnessID)
		}
	}

	if o.R == nil {
		o.R = &illnessR{
			UserIllnesses: related,
		}
	} else {
		o.R.UserIllnesses = append(o.R.UserIllnesses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userIllnessR{
				Illness: o,
			}
		} else {
			rel.R.Illness = o
		}
	}
	return nil
}

// SetUserIllnesses removes all previously related items of the
// illness replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Illness's UserIllnesses accordingly.
// Replaces o.R.UserIllnesses with related.
// Sets related.R.Illness's UserIllnesses accordingly.
func (o *Illness) SetUserIllnesses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserIllness) error {
	query := "update \"user_illness\" set \"illness_id\" = null where \"illness_id\" = $1"
	values := []interface{}{o.IllnessID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.UserIllnesses {
			queries.SetScanner(&rel.IllnessID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Illness = nil
		}

		o.R.UserIllnesses = nil
	}
	return o.AddUserIllnesses(ctx, exec, insert, related...)
}

// RemoveUserIllnesses relationships from objects passed in.
// Removes related items from R.UserIllnesses (uses pointer comparison, removal does not keep order)
// Sets related.R.Illness.
func (o *Illness) RemoveUserIllnesses(ctx context.Context, exec boil.ContextExecutor, related ...*UserIllness) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.IllnessID, nil)
		if rel.R != nil {
			rel.R.Illness = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("illness_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UserIllnesses {
			if rel != ri {
				continue
			}

			ln := len(o.R.UserIllnesses)
			if ln > 1 && i < ln-1 {
				o.R.UserIllnesses[i] = o.R.UserIllnesses[ln-1]
			}
			o.R.UserIllnesses = o.R.UserIllnesses[:ln-1]
			break
		}
	}

	return nil
}

// Illnesses retrieves all the records using an executor.
func Illnesses(mods ...qm.QueryMod) illnessQuery {
	mods = append(mods, qm.From("\"illness\""))
	return illnessQuery{NewQuery(mods...)}
}

// FindIllness retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIllness(ctx context.Context, exec boil.ContextExecutor, illnessID int, selectCols ...string) (*Illness, error) {
	illnessObj := &Illness{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"illness\" where \"illness_id\"=$1", sel,
	)

	q := queries.Raw(query, illnessID)

	err := q.Bind(ctx, exec, illnessObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from illness")
	}

	return illnessObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Illness) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no illness provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(illnessColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	illnessInsertCacheMut.RLock()
	cache, cached := illnessInsertCache[key]
	illnessInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			illnessAllColumns,
			illnessColumnsWithDefault,
			illnessColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(illnessType, illnessMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(illnessType, illnessMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"illness\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"illness\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into illness")
	}

	if !cached {
		illnessInsertCacheMut.Lock()
		illnessInsertCache[key] = cache
		illnessInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Illness.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Illness) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	illnessUpdateCacheMut.RLock()
	cache, cached := illnessUpdateCache[key]
	illnessUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			illnessAllColumns,
			illnessPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update illness, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"illness\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, illnessPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(illnessType, illnessMapping, append(wl, illnessPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update illness row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for illness")
	}

	if !cached {
		illnessUpdateCacheMut.Lock()
		illnessUpdateCache[key] = cache
		illnessUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q illnessQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for illness")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for illness")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IllnessSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), illnessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"illness\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, illnessPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in illness slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all illness")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Illness) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no illness provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(illnessColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	illnessUpsertCacheMut.RLock()
	cache, cached := illnessUpsertCache[key]
	illnessUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			illnessAllColumns,
			illnessColumnsWithDefault,
			illnessColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			illnessAllColumns,
			illnessPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert illness, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(illnessPrimaryKeyColumns))
			copy(conflict, illnessPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"illness\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(illnessType, illnessMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(illnessType, illnessMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert illness")
	}

	if !cached {
		illnessUpsertCacheMut.Lock()
		illnessUpsertCache[key] = cache
		illnessUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Illness record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Illness) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Illness provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), illnessPrimaryKeyMapping)
	sql := "DELETE FROM \"illness\" WHERE \"illness_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from illness")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for illness")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q illnessQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no illnessQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from illness")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for illness")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IllnessSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(illnessBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), illnessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"illness\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, illnessPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from illness slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for illness")
	}

	if len(illnessAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Illness) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindIllness(ctx, exec, o.IllnessID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IllnessSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IllnessSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), illnessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"illness\".* FROM \"illness\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, illnessPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in IllnessSlice")
	}

	*o = slice

	return nil
}

// IllnessExists checks if the Illness row exists.
func IllnessExists(ctx context.Context, exec boil.ContextExecutor, illnessID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"illness\" where \"illness_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, illnessID)
	}

	row := exec.QueryRowContext(ctx, sql, illnessID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if illness exists")
	}

	return exists, nil
}
