// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testVisits(t *testing.T) {
	t.Parallel()

	query := Visits()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testVisitsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Visit{}
	if err = randomize.Struct(seed, o, visitDBTypes, true, visitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Visit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Visits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVisitsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Visit{}
	if err = randomize.Struct(seed, o, visitDBTypes, true, visitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Visit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Visits().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Visits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVisitsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Visit{}
	if err = randomize.Struct(seed, o, visitDBTypes, true, visitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Visit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VisitSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Visits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVisitsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Visit{}
	if err = randomize.Struct(seed, o, visitDBTypes, true, visitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Visit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := VisitExists(ctx, tx, o.VisitID)
	if err != nil {
		t.Errorf("Unable to check if Visit exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VisitExists to return true, but got false.")
	}
}

func testVisitsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Visit{}
	if err = randomize.Struct(seed, o, visitDBTypes, true, visitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Visit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	visitFound, err := FindVisit(ctx, tx, o.VisitID)
	if err != nil {
		t.Error(err)
	}

	if visitFound == nil {
		t.Error("want a record, got nil")
	}
}

func testVisitsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Visit{}
	if err = randomize.Struct(seed, o, visitDBTypes, true, visitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Visit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Visits().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testVisitsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Visit{}
	if err = randomize.Struct(seed, o, visitDBTypes, true, visitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Visit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Visits().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVisitsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	visitOne := &Visit{}
	visitTwo := &Visit{}
	if err = randomize.Struct(seed, visitOne, visitDBTypes, false, visitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Visit struct: %s", err)
	}
	if err = randomize.Struct(seed, visitTwo, visitDBTypes, false, visitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Visit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = visitOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = visitTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Visits().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVisitsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	visitOne := &Visit{}
	visitTwo := &Visit{}
	if err = randomize.Struct(seed, visitOne, visitDBTypes, false, visitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Visit struct: %s", err)
	}
	if err = randomize.Struct(seed, visitTwo, visitDBTypes, false, visitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Visit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = visitOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = visitTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Visits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func visitBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Visit) error {
	*o = Visit{}
	return nil
}

func visitAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Visit) error {
	*o = Visit{}
	return nil
}

func visitAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Visit) error {
	*o = Visit{}
	return nil
}

func visitBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Visit) error {
	*o = Visit{}
	return nil
}

func visitAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Visit) error {
	*o = Visit{}
	return nil
}

func visitBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Visit) error {
	*o = Visit{}
	return nil
}

func visitAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Visit) error {
	*o = Visit{}
	return nil
}

func visitBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Visit) error {
	*o = Visit{}
	return nil
}

func visitAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Visit) error {
	*o = Visit{}
	return nil
}

func testVisitsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Visit{}
	o := &Visit{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, visitDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Visit object: %s", err)
	}

	AddVisitHook(boil.BeforeInsertHook, visitBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	visitBeforeInsertHooks = []VisitHook{}

	AddVisitHook(boil.AfterInsertHook, visitAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	visitAfterInsertHooks = []VisitHook{}

	AddVisitHook(boil.AfterSelectHook, visitAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	visitAfterSelectHooks = []VisitHook{}

	AddVisitHook(boil.BeforeUpdateHook, visitBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	visitBeforeUpdateHooks = []VisitHook{}

	AddVisitHook(boil.AfterUpdateHook, visitAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	visitAfterUpdateHooks = []VisitHook{}

	AddVisitHook(boil.BeforeDeleteHook, visitBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	visitBeforeDeleteHooks = []VisitHook{}

	AddVisitHook(boil.AfterDeleteHook, visitAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	visitAfterDeleteHooks = []VisitHook{}

	AddVisitHook(boil.BeforeUpsertHook, visitBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	visitBeforeUpsertHooks = []VisitHook{}

	AddVisitHook(boil.AfterUpsertHook, visitAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	visitAfterUpsertHooks = []VisitHook{}
}

func testVisitsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Visit{}
	if err = randomize.Struct(seed, o, visitDBTypes, true, visitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Visit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Visits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVisitsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Visit{}
	if err = randomize.Struct(seed, o, visitDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Visit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(visitColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Visits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVisitToOneDoctorUsingDoctor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Visit
	var foreign Doctor

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, visitDBTypes, true, visitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Visit struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, doctorDBTypes, false, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.DoctorID, foreign.DoctorID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Doctor().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.DoctorID, foreign.DoctorID) {
		t.Errorf("want: %v, got %v", foreign.DoctorID, check.DoctorID)
	}

	slice := VisitSlice{&local}
	if err = local.L.LoadDoctor(ctx, tx, false, (*[]*Visit)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Doctor == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Doctor = nil
	if err = local.L.LoadDoctor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Doctor == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testVisitToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Visit
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, visitDBTypes, true, visitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Visit struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserID, foreign.UserID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.UserID, foreign.UserID) {
		t.Errorf("want: %v, got %v", foreign.UserID, check.UserID)
	}

	slice := VisitSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*Visit)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testVisitToOneUserIllnessUsingUserIllness(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Visit
	var foreign UserIllness

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, visitDBTypes, true, visitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Visit struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userIllnessDBTypes, false, userIllnessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIllness struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserIllnessID, foreign.UserIllnessID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UserIllness().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.UserIllnessID, foreign.UserIllnessID) {
		t.Errorf("want: %v, got %v", foreign.UserIllnessID, check.UserIllnessID)
	}

	slice := VisitSlice{&local}
	if err = local.L.LoadUserIllness(ctx, tx, false, (*[]*Visit)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserIllness == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UserIllness = nil
	if err = local.L.LoadUserIllness(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserIllness == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testVisitToOneSetOpDoctorUsingDoctor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Visit
	var b, c Doctor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, visitDBTypes, false, strmangle.SetComplement(visitPrimaryKeyColumns, visitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, doctorDBTypes, false, strmangle.SetComplement(doctorPrimaryKeyColumns, doctorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, doctorDBTypes, false, strmangle.SetComplement(doctorPrimaryKeyColumns, doctorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Doctor{&b, &c} {
		err = a.SetDoctor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Doctor != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Visits[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.DoctorID, x.DoctorID) {
			t.Error("foreign key was wrong value", a.DoctorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DoctorID))
		reflect.Indirect(reflect.ValueOf(&a.DoctorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.DoctorID, x.DoctorID) {
			t.Error("foreign key was wrong value", a.DoctorID, x.DoctorID)
		}
	}
}

func testVisitToOneRemoveOpDoctorUsingDoctor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Visit
	var b Doctor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, visitDBTypes, false, strmangle.SetComplement(visitPrimaryKeyColumns, visitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, doctorDBTypes, false, strmangle.SetComplement(doctorPrimaryKeyColumns, doctorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetDoctor(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveDoctor(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Doctor().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Doctor != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.DoctorID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Visits) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testVisitToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Visit
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, visitDBTypes, false, strmangle.SetComplement(visitPrimaryKeyColumns, visitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Visits[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserID, x.UserID) {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserID, x.UserID) {
			t.Error("foreign key was wrong value", a.UserID, x.UserID)
		}
	}
}

func testVisitToOneRemoveOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Visit
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, visitDBTypes, false, strmangle.SetComplement(visitPrimaryKeyColumns, visitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.User().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.User != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UserID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Visits) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testVisitToOneSetOpUserIllnessUsingUserIllness(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Visit
	var b, c UserIllness

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, visitDBTypes, false, strmangle.SetComplement(visitPrimaryKeyColumns, visitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userIllnessDBTypes, false, strmangle.SetComplement(userIllnessPrimaryKeyColumns, userIllnessColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userIllnessDBTypes, false, strmangle.SetComplement(userIllnessPrimaryKeyColumns, userIllnessColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UserIllness{&b, &c} {
		err = a.SetUserIllness(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UserIllness != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Visits[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserIllnessID, x.UserIllnessID) {
			t.Error("foreign key was wrong value", a.UserIllnessID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserIllnessID))
		reflect.Indirect(reflect.ValueOf(&a.UserIllnessID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserIllnessID, x.UserIllnessID) {
			t.Error("foreign key was wrong value", a.UserIllnessID, x.UserIllnessID)
		}
	}
}

func testVisitToOneRemoveOpUserIllnessUsingUserIllness(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Visit
	var b UserIllness

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, visitDBTypes, false, strmangle.SetComplement(visitPrimaryKeyColumns, visitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userIllnessDBTypes, false, strmangle.SetComplement(userIllnessPrimaryKeyColumns, userIllnessColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUserIllness(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUserIllness(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.UserIllness().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.UserIllness != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UserIllnessID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Visits) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testVisitsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Visit{}
	if err = randomize.Struct(seed, o, visitDBTypes, true, visitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Visit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVisitsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Visit{}
	if err = randomize.Struct(seed, o, visitDBTypes, true, visitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Visit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VisitSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVisitsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Visit{}
	if err = randomize.Struct(seed, o, visitDBTypes, true, visitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Visit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Visits().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	visitDBTypes = map[string]string{`VisitID`: `integer`, `UserIllnessID`: `integer`, `DoctorID`: `integer`, `UserID`: `integer`, `VisitDate`: `date`}
	_            = bytes.MinRead
)

func testVisitsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(visitPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(visitAllColumns) == len(visitPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Visit{}
	if err = randomize.Struct(seed, o, visitDBTypes, true, visitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Visit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Visits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, visitDBTypes, true, visitPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Visit struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testVisitsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(visitAllColumns) == len(visitPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Visit{}
	if err = randomize.Struct(seed, o, visitDBTypes, true, visitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Visit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Visits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, visitDBTypes, true, visitPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Visit struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(visitAllColumns, visitPrimaryKeyColumns) {
		fields = visitAllColumns
	} else {
		fields = strmangle.SetComplement(
			visitAllColumns,
			visitPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := VisitSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testVisitsUpsert(t *testing.T) {
	t.Parallel()

	if len(visitAllColumns) == len(visitPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Visit{}
	if err = randomize.Struct(seed, &o, visitDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Visit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Visit: %s", err)
	}

	count, err := Visits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, visitDBTypes, false, visitPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Visit struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Visit: %s", err)
	}

	count, err = Visits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
