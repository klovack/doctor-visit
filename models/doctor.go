// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Doctor is an object representing the database table.
type Doctor struct {
	DoctorID   int         `boil:"doctor_id" json:"doctor_id" toml:"doctor_id" yaml:"doctor_id"`
	Name       null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Title      null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Specialist null.String `boil:"specialist" json:"specialist,omitempty" toml:"specialist" yaml:"specialist,omitempty"`
	Address    null.String `boil:"address" json:"address,omitempty" toml:"address" yaml:"address,omitempty"`

	R *doctorR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L doctorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DoctorColumns = struct {
	DoctorID   string
	Name       string
	Title      string
	Specialist string
	Address    string
}{
	DoctorID:   "doctor_id",
	Name:       "name",
	Title:      "title",
	Specialist: "specialist",
	Address:    "address",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var DoctorWhere = struct {
	DoctorID   whereHelperint
	Name       whereHelpernull_String
	Title      whereHelpernull_String
	Specialist whereHelpernull_String
	Address    whereHelpernull_String
}{
	DoctorID:   whereHelperint{field: "\"doctor\".\"doctor_id\""},
	Name:       whereHelpernull_String{field: "\"doctor\".\"name\""},
	Title:      whereHelpernull_String{field: "\"doctor\".\"title\""},
	Specialist: whereHelpernull_String{field: "\"doctor\".\"specialist\""},
	Address:    whereHelpernull_String{field: "\"doctor\".\"address\""},
}

// DoctorRels is where relationship names are stored.
var DoctorRels = struct {
	Users         string
	UserIllnesses string
	Visits        string
}{
	Users:         "Users",
	UserIllnesses: "UserIllnesses",
	Visits:        "Visits",
}

// doctorR is where relationships are stored.
type doctorR struct {
	Users         UserSlice
	UserIllnesses UserIllnessSlice
	Visits        VisitSlice
}

// NewStruct creates a new relationship struct
func (*doctorR) NewStruct() *doctorR {
	return &doctorR{}
}

// doctorL is where Load methods for each relationship are stored.
type doctorL struct{}

var (
	doctorAllColumns            = []string{"doctor_id", "name", "title", "specialist", "address"}
	doctorColumnsWithoutDefault = []string{"name", "title", "specialist", "address"}
	doctorColumnsWithDefault    = []string{"doctor_id"}
	doctorPrimaryKeyColumns     = []string{"doctor_id"}
)

type (
	// DoctorSlice is an alias for a slice of pointers to Doctor.
	// This should generally be used opposed to []Doctor.
	DoctorSlice []*Doctor
	// DoctorHook is the signature for custom Doctor hook methods
	DoctorHook func(context.Context, boil.ContextExecutor, *Doctor) error

	doctorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	doctorType                 = reflect.TypeOf(&Doctor{})
	doctorMapping              = queries.MakeStructMapping(doctorType)
	doctorPrimaryKeyMapping, _ = queries.BindMapping(doctorType, doctorMapping, doctorPrimaryKeyColumns)
	doctorInsertCacheMut       sync.RWMutex
	doctorInsertCache          = make(map[string]insertCache)
	doctorUpdateCacheMut       sync.RWMutex
	doctorUpdateCache          = make(map[string]updateCache)
	doctorUpsertCacheMut       sync.RWMutex
	doctorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var doctorBeforeInsertHooks []DoctorHook
var doctorBeforeUpdateHooks []DoctorHook
var doctorBeforeDeleteHooks []DoctorHook
var doctorBeforeUpsertHooks []DoctorHook

var doctorAfterInsertHooks []DoctorHook
var doctorAfterSelectHooks []DoctorHook
var doctorAfterUpdateHooks []DoctorHook
var doctorAfterDeleteHooks []DoctorHook
var doctorAfterUpsertHooks []DoctorHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Doctor) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Doctor) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Doctor) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Doctor) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Doctor) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Doctor) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Doctor) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Doctor) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Doctor) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDoctorHook registers your hook function for all future operations.
func AddDoctorHook(hookPoint boil.HookPoint, doctorHook DoctorHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		doctorBeforeInsertHooks = append(doctorBeforeInsertHooks, doctorHook)
	case boil.BeforeUpdateHook:
		doctorBeforeUpdateHooks = append(doctorBeforeUpdateHooks, doctorHook)
	case boil.BeforeDeleteHook:
		doctorBeforeDeleteHooks = append(doctorBeforeDeleteHooks, doctorHook)
	case boil.BeforeUpsertHook:
		doctorBeforeUpsertHooks = append(doctorBeforeUpsertHooks, doctorHook)
	case boil.AfterInsertHook:
		doctorAfterInsertHooks = append(doctorAfterInsertHooks, doctorHook)
	case boil.AfterSelectHook:
		doctorAfterSelectHooks = append(doctorAfterSelectHooks, doctorHook)
	case boil.AfterUpdateHook:
		doctorAfterUpdateHooks = append(doctorAfterUpdateHooks, doctorHook)
	case boil.AfterDeleteHook:
		doctorAfterDeleteHooks = append(doctorAfterDeleteHooks, doctorHook)
	case boil.AfterUpsertHook:
		doctorAfterUpsertHooks = append(doctorAfterUpsertHooks, doctorHook)
	}
}

// One returns a single doctor record from the query.
func (q doctorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Doctor, error) {
	o := &Doctor{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for doctor")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Doctor records from the query.
func (q doctorQuery) All(ctx context.Context, exec boil.ContextExecutor) (DoctorSlice, error) {
	var o []*Doctor

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Doctor slice")
	}

	if len(doctorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Doctor records in the query.
func (q doctorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count doctor rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q doctorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if doctor exists")
	}

	return count > 0, nil
}

// Users retrieves all the user's Users with an executor.
func (o *Doctor) Users(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"favorite_doctors\" on \"user\".\"user_id\" = \"favorite_doctors\".\"user_id\""),
		qm.Where("\"favorite_doctors\".\"doctor_id\"=?", o.DoctorID),
	)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"user\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user\".*"})
	}

	return query
}

// UserIllnesses retrieves all the user_illness's UserIllnesses with an executor.
func (o *Doctor) UserIllnesses(mods ...qm.QueryMod) userIllnessQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_illness\".\"doctor_id\"=?", o.DoctorID),
	)

	query := UserIllnesses(queryMods...)
	queries.SetFrom(query.Query, "\"user_illness\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_illness\".*"})
	}

	return query
}

// Visits retrieves all the visit's Visits with an executor.
func (o *Doctor) Visits(mods ...qm.QueryMod) visitQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"visit\".\"doctor_id\"=?", o.DoctorID),
	)

	query := Visits(queryMods...)
	queries.SetFrom(query.Query, "\"visit\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"visit\".*"})
	}

	return query
}

// LoadUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (doctorL) LoadUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDoctor interface{}, mods queries.Applicator) error {
	var slice []*Doctor
	var object *Doctor

	if singular {
		object = maybeDoctor.(*Doctor)
	} else {
		slice = *maybeDoctor.(*[]*Doctor)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &doctorR{}
		}
		args = append(args, object.DoctorID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &doctorR{}
			}

			for _, a := range args {
				if a == obj.DoctorID {
					continue Outer
				}
			}

			args = append(args, obj.DoctorID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"user\".*, \"a\".\"doctor_id\""),
		qm.From("\"user\""),
		qm.InnerJoin("\"favorite_doctors\" as \"a\" on \"user\".\"user_id\" = \"a\".\"user_id\""),
		qm.WhereIn("\"a\".\"doctor_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user")
	}

	var resultSlice []*User

	var localJoinCols []int
	for results.Next() {
		one := new(User)
		var localJoinCol int

		err = results.Scan(&one.UserID, &one.FirstName, &one.LastName, &one.Email, &one.BirthDate, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for user")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice user")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Users = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.Doctors = append(foreign.R.Doctors, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.DoctorID == localJoinCol {
				local.R.Users = append(local.R.Users, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Doctors = append(foreign.R.Doctors, local)
				break
			}
		}
	}

	return nil
}

// LoadUserIllnesses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (doctorL) LoadUserIllnesses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDoctor interface{}, mods queries.Applicator) error {
	var slice []*Doctor
	var object *Doctor

	if singular {
		object = maybeDoctor.(*Doctor)
	} else {
		slice = *maybeDoctor.(*[]*Doctor)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &doctorR{}
		}
		args = append(args, object.DoctorID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &doctorR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DoctorID) {
					continue Outer
				}
			}

			args = append(args, obj.DoctorID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`user_illness`), qm.WhereIn(`doctor_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_illness")
	}

	var resultSlice []*UserIllness
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_illness")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_illness")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_illness")
	}

	if len(userIllnessAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserIllnesses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userIllnessR{}
			}
			foreign.R.Doctor = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.DoctorID, foreign.DoctorID) {
				local.R.UserIllnesses = append(local.R.UserIllnesses, foreign)
				if foreign.R == nil {
					foreign.R = &userIllnessR{}
				}
				foreign.R.Doctor = local
				break
			}
		}
	}

	return nil
}

// LoadVisits allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (doctorL) LoadVisits(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDoctor interface{}, mods queries.Applicator) error {
	var slice []*Doctor
	var object *Doctor

	if singular {
		object = maybeDoctor.(*Doctor)
	} else {
		slice = *maybeDoctor.(*[]*Doctor)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &doctorR{}
		}
		args = append(args, object.DoctorID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &doctorR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DoctorID) {
					continue Outer
				}
			}

			args = append(args, obj.DoctorID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`visit`), qm.WhereIn(`doctor_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load visit")
	}

	var resultSlice []*Visit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice visit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on visit")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for visit")
	}

	if len(visitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Visits = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &visitR{}
			}
			foreign.R.Doctor = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.DoctorID, foreign.DoctorID) {
				local.R.Visits = append(local.R.Visits, foreign)
				if foreign.R == nil {
					foreign.R = &visitR{}
				}
				foreign.R.Doctor = local
				break
			}
		}
	}

	return nil
}

// AddUsers adds the given related objects to the existing relationships
// of the doctor, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.Doctors appropriately.
func (o *Doctor) AddUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"favorite_doctors\" (\"doctor_id\", \"user_id\") values ($1, $2)"
		values := []interface{}{o.DoctorID, rel.UserID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &doctorR{
			Users: related,
		}
	} else {
		o.R.Users = append(o.R.Users, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				Doctors: DoctorSlice{o},
			}
		} else {
			rel.R.Doctors = append(rel.R.Doctors, o)
		}
	}
	return nil
}

// SetUsers removes all previously related items of the
// doctor replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Doctors's Users accordingly.
// Replaces o.R.Users with related.
// Sets related.R.Doctors's Users accordingly.
func (o *Doctor) SetUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "delete from \"favorite_doctors\" where \"doctor_id\" = $1"
	values := []interface{}{o.DoctorID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeUsersFromDoctorsSlice(o, related)
	if o.R != nil {
		o.R.Users = nil
	}
	return o.AddUsers(ctx, exec, insert, related...)
}

// RemoveUsers relationships from objects passed in.
// Removes related items from R.Users (uses pointer comparison, removal does not keep order)
// Sets related.R.Doctors.
func (o *Doctor) RemoveUsers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"favorite_doctors\" where \"doctor_id\" = $1 and \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.DoctorID}
	for _, rel := range related {
		values = append(values, rel.UserID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeUsersFromDoctorsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Users {
			if rel != ri {
				continue
			}

			ln := len(o.R.Users)
			if ln > 1 && i < ln-1 {
				o.R.Users[i] = o.R.Users[ln-1]
			}
			o.R.Users = o.R.Users[:ln-1]
			break
		}
	}

	return nil
}

func removeUsersFromDoctorsSlice(o *Doctor, related []*User) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Doctors {
			if o.DoctorID != ri.DoctorID {
				continue
			}

			ln := len(rel.R.Doctors)
			if ln > 1 && i < ln-1 {
				rel.R.Doctors[i] = rel.R.Doctors[ln-1]
			}
			rel.R.Doctors = rel.R.Doctors[:ln-1]
			break
		}
	}
}

// AddUserIllnesses adds the given related objects to the existing relationships
// of the doctor, optionally inserting them as new records.
// Appends related to o.R.UserIllnesses.
// Sets related.R.Doctor appropriately.
func (o *Doctor) AddUserIllnesses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserIllness) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DoctorID, o.DoctorID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_illness\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"doctor_id"}),
				strmangle.WhereClause("\"", "\"", 2, userIllnessPrimaryKeyColumns),
			)
			values := []interface{}{o.DoctorID, rel.UserIllnessID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DoctorID, o.DoctorID)
		}
	}

	if o.R == nil {
		o.R = &doctorR{
			UserIllnesses: related,
		}
	} else {
		o.R.UserIllnesses = append(o.R.UserIllnesses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userIllnessR{
				Doctor: o,
			}
		} else {
			rel.R.Doctor = o
		}
	}
	return nil
}

// SetUserIllnesses removes all previously related items of the
// doctor replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Doctor's UserIllnesses accordingly.
// Replaces o.R.UserIllnesses with related.
// Sets related.R.Doctor's UserIllnesses accordingly.
func (o *Doctor) SetUserIllnesses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserIllness) error {
	query := "update \"user_illness\" set \"doctor_id\" = null where \"doctor_id\" = $1"
	values := []interface{}{o.DoctorID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.UserIllnesses {
			queries.SetScanner(&rel.DoctorID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Doctor = nil
		}

		o.R.UserIllnesses = nil
	}
	return o.AddUserIllnesses(ctx, exec, insert, related...)
}

// RemoveUserIllnesses relationships from objects passed in.
// Removes related items from R.UserIllnesses (uses pointer comparison, removal does not keep order)
// Sets related.R.Doctor.
func (o *Doctor) RemoveUserIllnesses(ctx context.Context, exec boil.ContextExecutor, related ...*UserIllness) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DoctorID, nil)
		if rel.R != nil {
			rel.R.Doctor = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("doctor_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UserIllnesses {
			if rel != ri {
				continue
			}

			ln := len(o.R.UserIllnesses)
			if ln > 1 && i < ln-1 {
				o.R.UserIllnesses[i] = o.R.UserIllnesses[ln-1]
			}
			o.R.UserIllnesses = o.R.UserIllnesses[:ln-1]
			break
		}
	}

	return nil
}

// AddVisits adds the given related objects to the existing relationships
// of the doctor, optionally inserting them as new records.
// Appends related to o.R.Visits.
// Sets related.R.Doctor appropriately.
func (o *Doctor) AddVisits(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Visit) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DoctorID, o.DoctorID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"visit\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"doctor_id"}),
				strmangle.WhereClause("\"", "\"", 2, visitPrimaryKeyColumns),
			)
			values := []interface{}{o.DoctorID, rel.VisitID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DoctorID, o.DoctorID)
		}
	}

	if o.R == nil {
		o.R = &doctorR{
			Visits: related,
		}
	} else {
		o.R.Visits = append(o.R.Visits, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &visitR{
				Doctor: o,
			}
		} else {
			rel.R.Doctor = o
		}
	}
	return nil
}

// SetVisits removes all previously related items of the
// doctor replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Doctor's Visits accordingly.
// Replaces o.R.Visits with related.
// Sets related.R.Doctor's Visits accordingly.
func (o *Doctor) SetVisits(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Visit) error {
	query := "update \"visit\" set \"doctor_id\" = null where \"doctor_id\" = $1"
	values := []interface{}{o.DoctorID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Visits {
			queries.SetScanner(&rel.DoctorID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Doctor = nil
		}

		o.R.Visits = nil
	}
	return o.AddVisits(ctx, exec, insert, related...)
}

// RemoveVisits relationships from objects passed in.
// Removes related items from R.Visits (uses pointer comparison, removal does not keep order)
// Sets related.R.Doctor.
func (o *Doctor) RemoveVisits(ctx context.Context, exec boil.ContextExecutor, related ...*Visit) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DoctorID, nil)
		if rel.R != nil {
			rel.R.Doctor = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("doctor_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Visits {
			if rel != ri {
				continue
			}

			ln := len(o.R.Visits)
			if ln > 1 && i < ln-1 {
				o.R.Visits[i] = o.R.Visits[ln-1]
			}
			o.R.Visits = o.R.Visits[:ln-1]
			break
		}
	}

	return nil
}

// Doctors retrieves all the records using an executor.
func Doctors(mods ...qm.QueryMod) doctorQuery {
	mods = append(mods, qm.From("\"doctor\""))
	return doctorQuery{NewQuery(mods...)}
}

// FindDoctor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDoctor(ctx context.Context, exec boil.ContextExecutor, doctorID int, selectCols ...string) (*Doctor, error) {
	doctorObj := &Doctor{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"doctor\" where \"doctor_id\"=$1", sel,
	)

	q := queries.Raw(query, doctorID)

	err := q.Bind(ctx, exec, doctorObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from doctor")
	}

	return doctorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Doctor) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no doctor provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(doctorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	doctorInsertCacheMut.RLock()
	cache, cached := doctorInsertCache[key]
	doctorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			doctorAllColumns,
			doctorColumnsWithDefault,
			doctorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(doctorType, doctorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(doctorType, doctorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"doctor\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"doctor\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into doctor")
	}

	if !cached {
		doctorInsertCacheMut.Lock()
		doctorInsertCache[key] = cache
		doctorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Doctor.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Doctor) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	doctorUpdateCacheMut.RLock()
	cache, cached := doctorUpdateCache[key]
	doctorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			doctorAllColumns,
			doctorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update doctor, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"doctor\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, doctorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(doctorType, doctorMapping, append(wl, doctorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update doctor row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for doctor")
	}

	if !cached {
		doctorUpdateCacheMut.Lock()
		doctorUpdateCache[key] = cache
		doctorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q doctorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for doctor")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for doctor")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DoctorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doctorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"doctor\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, doctorPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in doctor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all doctor")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Doctor) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no doctor provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(doctorColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	doctorUpsertCacheMut.RLock()
	cache, cached := doctorUpsertCache[key]
	doctorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			doctorAllColumns,
			doctorColumnsWithDefault,
			doctorColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			doctorAllColumns,
			doctorPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert doctor, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(doctorPrimaryKeyColumns))
			copy(conflict, doctorPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"doctor\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(doctorType, doctorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(doctorType, doctorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert doctor")
	}

	if !cached {
		doctorUpsertCacheMut.Lock()
		doctorUpsertCache[key] = cache
		doctorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Doctor record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Doctor) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Doctor provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), doctorPrimaryKeyMapping)
	sql := "DELETE FROM \"doctor\" WHERE \"doctor_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from doctor")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for doctor")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q doctorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no doctorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from doctor")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for doctor")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DoctorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(doctorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doctorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"doctor\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, doctorPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from doctor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for doctor")
	}

	if len(doctorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Doctor) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDoctor(ctx, exec, o.DoctorID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DoctorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DoctorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doctorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"doctor\".* FROM \"doctor\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, doctorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DoctorSlice")
	}

	*o = slice

	return nil
}

// DoctorExists checks if the Doctor row exists.
func DoctorExists(ctx context.Context, exec boil.ContextExecutor, doctorID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"doctor\" where \"doctor_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, doctorID)
	}

	row := exec.QueryRowContext(ctx, sql, doctorID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if doctor exists")
	}

	return exists, nil
}
