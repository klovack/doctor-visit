// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDoctors(t *testing.T) {
	t.Parallel()

	query := Doctors()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDoctorsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Doctors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDoctorsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Doctors().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Doctors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDoctorsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DoctorSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Doctors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDoctorsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DoctorExists(ctx, tx, o.DoctorID)
	if err != nil {
		t.Errorf("Unable to check if Doctor exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DoctorExists to return true, but got false.")
	}
}

func testDoctorsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	doctorFound, err := FindDoctor(ctx, tx, o.DoctorID)
	if err != nil {
		t.Error(err)
	}

	if doctorFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDoctorsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Doctors().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDoctorsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Doctors().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDoctorsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	doctorOne := &Doctor{}
	doctorTwo := &Doctor{}
	if err = randomize.Struct(seed, doctorOne, doctorDBTypes, false, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}
	if err = randomize.Struct(seed, doctorTwo, doctorDBTypes, false, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = doctorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = doctorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Doctors().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDoctorsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	doctorOne := &Doctor{}
	doctorTwo := &Doctor{}
	if err = randomize.Struct(seed, doctorOne, doctorDBTypes, false, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}
	if err = randomize.Struct(seed, doctorTwo, doctorDBTypes, false, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = doctorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = doctorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Doctors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func doctorBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Doctor) error {
	*o = Doctor{}
	return nil
}

func doctorAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Doctor) error {
	*o = Doctor{}
	return nil
}

func doctorAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Doctor) error {
	*o = Doctor{}
	return nil
}

func doctorBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Doctor) error {
	*o = Doctor{}
	return nil
}

func doctorAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Doctor) error {
	*o = Doctor{}
	return nil
}

func doctorBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Doctor) error {
	*o = Doctor{}
	return nil
}

func doctorAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Doctor) error {
	*o = Doctor{}
	return nil
}

func doctorBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Doctor) error {
	*o = Doctor{}
	return nil
}

func doctorAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Doctor) error {
	*o = Doctor{}
	return nil
}

func testDoctorsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Doctor{}
	o := &Doctor{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, doctorDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Doctor object: %s", err)
	}

	AddDoctorHook(boil.BeforeInsertHook, doctorBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	doctorBeforeInsertHooks = []DoctorHook{}

	AddDoctorHook(boil.AfterInsertHook, doctorAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	doctorAfterInsertHooks = []DoctorHook{}

	AddDoctorHook(boil.AfterSelectHook, doctorAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	doctorAfterSelectHooks = []DoctorHook{}

	AddDoctorHook(boil.BeforeUpdateHook, doctorBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	doctorBeforeUpdateHooks = []DoctorHook{}

	AddDoctorHook(boil.AfterUpdateHook, doctorAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	doctorAfterUpdateHooks = []DoctorHook{}

	AddDoctorHook(boil.BeforeDeleteHook, doctorBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	doctorBeforeDeleteHooks = []DoctorHook{}

	AddDoctorHook(boil.AfterDeleteHook, doctorAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	doctorAfterDeleteHooks = []DoctorHook{}

	AddDoctorHook(boil.BeforeUpsertHook, doctorBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	doctorBeforeUpsertHooks = []DoctorHook{}

	AddDoctorHook(boil.AfterUpsertHook, doctorAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	doctorAfterUpsertHooks = []DoctorHook{}
}

func testDoctorsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Doctors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDoctorsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(doctorColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Doctors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDoctorToManyUsers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Doctor
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"favorite_doctors\" (\"doctor_id\", \"user_id\") values ($1, $2)", a.DoctorID, b.UserID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"favorite_doctors\" (\"doctor_id\", \"user_id\") values ($1, $2)", a.DoctorID, c.UserID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Users().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.UserID == b.UserID {
			bFound = true
		}
		if v.UserID == c.UserID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DoctorSlice{&a}
	if err = a.L.LoadUsers(ctx, tx, false, (*[]*Doctor)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Users); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Users = nil
	if err = a.L.LoadUsers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Users); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDoctorToManyUserIllnesses(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Doctor
	var b, c UserIllness

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userIllnessDBTypes, false, userIllnessColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userIllnessDBTypes, false, userIllnessColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.DoctorID, a.DoctorID)
	queries.Assign(&c.DoctorID, a.DoctorID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.UserIllnesses().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.DoctorID, b.DoctorID) {
			bFound = true
		}
		if queries.Equal(v.DoctorID, c.DoctorID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DoctorSlice{&a}
	if err = a.L.LoadUserIllnesses(ctx, tx, false, (*[]*Doctor)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserIllnesses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserIllnesses = nil
	if err = a.L.LoadUserIllnesses(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserIllnesses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDoctorToManyVisits(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Doctor
	var b, c Visit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, visitDBTypes, false, visitColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, visitDBTypes, false, visitColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.DoctorID, a.DoctorID)
	queries.Assign(&c.DoctorID, a.DoctorID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Visits().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.DoctorID, b.DoctorID) {
			bFound = true
		}
		if queries.Equal(v.DoctorID, c.DoctorID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DoctorSlice{&a}
	if err = a.L.LoadVisits(ctx, tx, false, (*[]*Doctor)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Visits); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Visits = nil
	if err = a.L.LoadVisits(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Visits); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDoctorToManyAddOpUsers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Doctor
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, doctorDBTypes, false, strmangle.SetComplement(doctorPrimaryKeyColumns, doctorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*User{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUsers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Doctors[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Doctors[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Users[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Users[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Users().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDoctorToManySetOpUsers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Doctor
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, doctorDBTypes, false, strmangle.SetComplement(doctorPrimaryKeyColumns, doctorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetUsers(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Users().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetUsers(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Users().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Doctors) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Doctors) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Doctors[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Doctors[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Users[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Users[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDoctorToManyRemoveOpUsers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Doctor
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, doctorDBTypes, false, strmangle.SetComplement(doctorPrimaryKeyColumns, doctorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddUsers(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Users().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveUsers(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Users().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Doctors) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Doctors) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Doctors[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Doctors[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Users) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Users[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Users[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDoctorToManyAddOpUserIllnesses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Doctor
	var b, c, d, e UserIllness

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, doctorDBTypes, false, strmangle.SetComplement(doctorPrimaryKeyColumns, doctorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserIllness{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userIllnessDBTypes, false, strmangle.SetComplement(userIllnessPrimaryKeyColumns, userIllnessColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserIllness{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserIllnesses(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.DoctorID, first.DoctorID) {
			t.Error("foreign key was wrong value", a.DoctorID, first.DoctorID)
		}
		if !queries.Equal(a.DoctorID, second.DoctorID) {
			t.Error("foreign key was wrong value", a.DoctorID, second.DoctorID)
		}

		if first.R.Doctor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Doctor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserIllnesses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserIllnesses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserIllnesses().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDoctorToManySetOpUserIllnesses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Doctor
	var b, c, d, e UserIllness

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, doctorDBTypes, false, strmangle.SetComplement(doctorPrimaryKeyColumns, doctorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserIllness{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userIllnessDBTypes, false, strmangle.SetComplement(userIllnessPrimaryKeyColumns, userIllnessColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetUserIllnesses(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.UserIllnesses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetUserIllnesses(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.UserIllnesses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DoctorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DoctorID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.DoctorID, d.DoctorID) {
		t.Error("foreign key was wrong value", a.DoctorID, d.DoctorID)
	}
	if !queries.Equal(a.DoctorID, e.DoctorID) {
		t.Error("foreign key was wrong value", a.DoctorID, e.DoctorID)
	}

	if b.R.Doctor != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Doctor != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Doctor != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Doctor != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.UserIllnesses[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.UserIllnesses[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDoctorToManyRemoveOpUserIllnesses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Doctor
	var b, c, d, e UserIllness

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, doctorDBTypes, false, strmangle.SetComplement(doctorPrimaryKeyColumns, doctorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserIllness{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userIllnessDBTypes, false, strmangle.SetComplement(userIllnessPrimaryKeyColumns, userIllnessColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddUserIllnesses(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.UserIllnesses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveUserIllnesses(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.UserIllnesses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DoctorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DoctorID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Doctor != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Doctor != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Doctor != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Doctor != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.UserIllnesses) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.UserIllnesses[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.UserIllnesses[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDoctorToManyAddOpVisits(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Doctor
	var b, c, d, e Visit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, doctorDBTypes, false, strmangle.SetComplement(doctorPrimaryKeyColumns, doctorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Visit{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, visitDBTypes, false, strmangle.SetComplement(visitPrimaryKeyColumns, visitColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Visit{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVisits(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.DoctorID, first.DoctorID) {
			t.Error("foreign key was wrong value", a.DoctorID, first.DoctorID)
		}
		if !queries.Equal(a.DoctorID, second.DoctorID) {
			t.Error("foreign key was wrong value", a.DoctorID, second.DoctorID)
		}

		if first.R.Doctor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Doctor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Visits[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Visits[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Visits().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDoctorToManySetOpVisits(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Doctor
	var b, c, d, e Visit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, doctorDBTypes, false, strmangle.SetComplement(doctorPrimaryKeyColumns, doctorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Visit{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, visitDBTypes, false, strmangle.SetComplement(visitPrimaryKeyColumns, visitColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetVisits(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Visits().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetVisits(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Visits().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DoctorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DoctorID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.DoctorID, d.DoctorID) {
		t.Error("foreign key was wrong value", a.DoctorID, d.DoctorID)
	}
	if !queries.Equal(a.DoctorID, e.DoctorID) {
		t.Error("foreign key was wrong value", a.DoctorID, e.DoctorID)
	}

	if b.R.Doctor != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Doctor != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Doctor != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Doctor != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Visits[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Visits[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDoctorToManyRemoveOpVisits(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Doctor
	var b, c, d, e Visit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, doctorDBTypes, false, strmangle.SetComplement(doctorPrimaryKeyColumns, doctorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Visit{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, visitDBTypes, false, strmangle.SetComplement(visitPrimaryKeyColumns, visitColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddVisits(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Visits().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveVisits(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Visits().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DoctorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DoctorID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Doctor != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Doctor != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Doctor != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Doctor != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Visits) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Visits[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Visits[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDoctorsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDoctorsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DoctorSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDoctorsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Doctors().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	doctorDBTypes = map[string]string{`DoctorID`: `integer`, `Name`: `character varying`, `Title`: `character varying`, `Specialist`: `character varying`, `Address`: `character varying`}
	_             = bytes.MinRead
)

func testDoctorsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(doctorPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(doctorAllColumns) == len(doctorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Doctors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDoctorsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(doctorAllColumns) == len(doctorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Doctors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(doctorAllColumns, doctorPrimaryKeyColumns) {
		fields = doctorAllColumns
	} else {
		fields = strmangle.SetComplement(
			doctorAllColumns,
			doctorPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DoctorSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDoctorsUpsert(t *testing.T) {
	t.Parallel()

	if len(doctorAllColumns) == len(doctorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Doctor{}
	if err = randomize.Struct(seed, &o, doctorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Doctor: %s", err)
	}

	count, err := Doctors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, doctorDBTypes, false, doctorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Doctor: %s", err)
	}

	count, err = Doctors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
