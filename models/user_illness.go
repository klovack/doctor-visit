// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// UserIllness is an object representing the database table.
type UserIllness struct {
	UserIllnessID int         `boil:"user_illness_id" json:"user_illness_id" toml:"user_illness_id" yaml:"user_illness_id"`
	IllnessID     null.Int    `boil:"illness_id" json:"illness_id,omitempty" toml:"illness_id" yaml:"illness_id,omitempty"`
	From          time.Time   `boil:"from" json:"from" toml:"from" yaml:"from"`
	To            null.Time   `boil:"to" json:"to,omitempty" toml:"to" yaml:"to,omitempty"`
	Notes         null.String `boil:"notes" json:"notes,omitempty" toml:"notes" yaml:"notes,omitempty"`
	DoctorID      null.Int    `boil:"doctor_id" json:"doctor_id,omitempty" toml:"doctor_id" yaml:"doctor_id,omitempty"`
	UserID        null.Int    `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`

	R *userIllnessR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userIllnessL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserIllnessColumns = struct {
	UserIllnessID string
	IllnessID     string
	From          string
	To            string
	Notes         string
	DoctorID      string
	UserID        string
}{
	UserIllnessID: "user_illness_id",
	IllnessID:     "illness_id",
	From:          "from",
	To:            "to",
	Notes:         "notes",
	DoctorID:      "doctor_id",
	UserID:        "user_id",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var UserIllnessWhere = struct {
	UserIllnessID whereHelperint
	IllnessID     whereHelpernull_Int
	From          whereHelpertime_Time
	To            whereHelpernull_Time
	Notes         whereHelpernull_String
	DoctorID      whereHelpernull_Int
	UserID        whereHelpernull_Int
}{
	UserIllnessID: whereHelperint{field: "\"user_illness\".\"user_illness_id\""},
	IllnessID:     whereHelpernull_Int{field: "\"user_illness\".\"illness_id\""},
	From:          whereHelpertime_Time{field: "\"user_illness\".\"from\""},
	To:            whereHelpernull_Time{field: "\"user_illness\".\"to\""},
	Notes:         whereHelpernull_String{field: "\"user_illness\".\"notes\""},
	DoctorID:      whereHelpernull_Int{field: "\"user_illness\".\"doctor_id\""},
	UserID:        whereHelpernull_Int{field: "\"user_illness\".\"user_id\""},
}

// UserIllnessRels is where relationship names are stored.
var UserIllnessRels = struct {
	Doctor  string
	Illness string
	User    string
	Visits  string
}{
	Doctor:  "Doctor",
	Illness: "Illness",
	User:    "User",
	Visits:  "Visits",
}

// userIllnessR is where relationships are stored.
type userIllnessR struct {
	Doctor  *Doctor
	Illness *Illness
	User    *User
	Visits  VisitSlice
}

// NewStruct creates a new relationship struct
func (*userIllnessR) NewStruct() *userIllnessR {
	return &userIllnessR{}
}

// userIllnessL is where Load methods for each relationship are stored.
type userIllnessL struct{}

var (
	userIllnessAllColumns            = []string{"user_illness_id", "illness_id", "from", "to", "notes", "doctor_id", "user_id"}
	userIllnessColumnsWithoutDefault = []string{"illness_id", "to", "notes", "doctor_id", "user_id"}
	userIllnessColumnsWithDefault    = []string{"user_illness_id", "from"}
	userIllnessPrimaryKeyColumns     = []string{"user_illness_id"}
)

type (
	// UserIllnessSlice is an alias for a slice of pointers to UserIllness.
	// This should generally be used opposed to []UserIllness.
	UserIllnessSlice []*UserIllness
	// UserIllnessHook is the signature for custom UserIllness hook methods
	UserIllnessHook func(context.Context, boil.ContextExecutor, *UserIllness) error

	userIllnessQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userIllnessType                 = reflect.TypeOf(&UserIllness{})
	userIllnessMapping              = queries.MakeStructMapping(userIllnessType)
	userIllnessPrimaryKeyMapping, _ = queries.BindMapping(userIllnessType, userIllnessMapping, userIllnessPrimaryKeyColumns)
	userIllnessInsertCacheMut       sync.RWMutex
	userIllnessInsertCache          = make(map[string]insertCache)
	userIllnessUpdateCacheMut       sync.RWMutex
	userIllnessUpdateCache          = make(map[string]updateCache)
	userIllnessUpsertCacheMut       sync.RWMutex
	userIllnessUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userIllnessBeforeInsertHooks []UserIllnessHook
var userIllnessBeforeUpdateHooks []UserIllnessHook
var userIllnessBeforeDeleteHooks []UserIllnessHook
var userIllnessBeforeUpsertHooks []UserIllnessHook

var userIllnessAfterInsertHooks []UserIllnessHook
var userIllnessAfterSelectHooks []UserIllnessHook
var userIllnessAfterUpdateHooks []UserIllnessHook
var userIllnessAfterDeleteHooks []UserIllnessHook
var userIllnessAfterUpsertHooks []UserIllnessHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserIllness) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userIllnessBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserIllness) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userIllnessBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserIllness) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userIllnessBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserIllness) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userIllnessBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserIllness) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userIllnessAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserIllness) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userIllnessAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserIllness) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userIllnessAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserIllness) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userIllnessAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserIllness) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userIllnessAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserIllnessHook registers your hook function for all future operations.
func AddUserIllnessHook(hookPoint boil.HookPoint, userIllnessHook UserIllnessHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userIllnessBeforeInsertHooks = append(userIllnessBeforeInsertHooks, userIllnessHook)
	case boil.BeforeUpdateHook:
		userIllnessBeforeUpdateHooks = append(userIllnessBeforeUpdateHooks, userIllnessHook)
	case boil.BeforeDeleteHook:
		userIllnessBeforeDeleteHooks = append(userIllnessBeforeDeleteHooks, userIllnessHook)
	case boil.BeforeUpsertHook:
		userIllnessBeforeUpsertHooks = append(userIllnessBeforeUpsertHooks, userIllnessHook)
	case boil.AfterInsertHook:
		userIllnessAfterInsertHooks = append(userIllnessAfterInsertHooks, userIllnessHook)
	case boil.AfterSelectHook:
		userIllnessAfterSelectHooks = append(userIllnessAfterSelectHooks, userIllnessHook)
	case boil.AfterUpdateHook:
		userIllnessAfterUpdateHooks = append(userIllnessAfterUpdateHooks, userIllnessHook)
	case boil.AfterDeleteHook:
		userIllnessAfterDeleteHooks = append(userIllnessAfterDeleteHooks, userIllnessHook)
	case boil.AfterUpsertHook:
		userIllnessAfterUpsertHooks = append(userIllnessAfterUpsertHooks, userIllnessHook)
	}
}

// One returns a single userIllness record from the query.
func (q userIllnessQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserIllness, error) {
	o := &UserIllness{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_illness")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserIllness records from the query.
func (q userIllnessQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserIllnessSlice, error) {
	var o []*UserIllness

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserIllness slice")
	}

	if len(userIllnessAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserIllness records in the query.
func (q userIllnessQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_illness rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userIllnessQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_illness exists")
	}

	return count > 0, nil
}

// Doctor pointed to by the foreign key.
func (o *UserIllness) Doctor(mods ...qm.QueryMod) doctorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("doctor_id=?", o.DoctorID),
	}

	queryMods = append(queryMods, mods...)

	query := Doctors(queryMods...)
	queries.SetFrom(query.Query, "\"doctor\"")

	return query
}

// Illness pointed to by the foreign key.
func (o *UserIllness) Illness(mods ...qm.QueryMod) illnessQuery {
	queryMods := []qm.QueryMod{
		qm.Where("illness_id=?", o.IllnessID),
	}

	queryMods = append(queryMods, mods...)

	query := Illnesses(queryMods...)
	queries.SetFrom(query.Query, "\"illness\"")

	return query
}

// User pointed to by the foreign key.
func (o *UserIllness) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("user_id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"user\"")

	return query
}

// Visits retrieves all the visit's Visits with an executor.
func (o *UserIllness) Visits(mods ...qm.QueryMod) visitQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"visit\".\"user_illness_id\"=?", o.UserIllnessID),
	)

	query := Visits(queryMods...)
	queries.SetFrom(query.Query, "\"visit\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"visit\".*"})
	}

	return query
}

// LoadDoctor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userIllnessL) LoadDoctor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserIllness interface{}, mods queries.Applicator) error {
	var slice []*UserIllness
	var object *UserIllness

	if singular {
		object = maybeUserIllness.(*UserIllness)
	} else {
		slice = *maybeUserIllness.(*[]*UserIllness)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userIllnessR{}
		}
		if !queries.IsNil(object.DoctorID) {
			args = append(args, object.DoctorID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userIllnessR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DoctorID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DoctorID) {
				args = append(args, obj.DoctorID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`doctor`), qm.WhereIn(`doctor_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Doctor")
	}

	var resultSlice []*Doctor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Doctor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for doctor")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for doctor")
	}

	if len(userIllnessAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Doctor = foreign
		if foreign.R == nil {
			foreign.R = &doctorR{}
		}
		foreign.R.UserIllnesses = append(foreign.R.UserIllnesses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DoctorID, foreign.DoctorID) {
				local.R.Doctor = foreign
				if foreign.R == nil {
					foreign.R = &doctorR{}
				}
				foreign.R.UserIllnesses = append(foreign.R.UserIllnesses, local)
				break
			}
		}
	}

	return nil
}

// LoadIllness allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userIllnessL) LoadIllness(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserIllness interface{}, mods queries.Applicator) error {
	var slice []*UserIllness
	var object *UserIllness

	if singular {
		object = maybeUserIllness.(*UserIllness)
	} else {
		slice = *maybeUserIllness.(*[]*UserIllness)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userIllnessR{}
		}
		if !queries.IsNil(object.IllnessID) {
			args = append(args, object.IllnessID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userIllnessR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.IllnessID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.IllnessID) {
				args = append(args, obj.IllnessID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`illness`), qm.WhereIn(`illness_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Illness")
	}

	var resultSlice []*Illness
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Illness")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for illness")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for illness")
	}

	if len(userIllnessAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Illness = foreign
		if foreign.R == nil {
			foreign.R = &illnessR{}
		}
		foreign.R.UserIllnesses = append(foreign.R.UserIllnesses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IllnessID, foreign.IllnessID) {
				local.R.Illness = foreign
				if foreign.R == nil {
					foreign.R = &illnessR{}
				}
				foreign.R.UserIllnesses = append(foreign.R.UserIllnesses, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userIllnessL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserIllness interface{}, mods queries.Applicator) error {
	var slice []*UserIllness
	var object *UserIllness

	if singular {
		object = maybeUserIllness.(*UserIllness)
	} else {
		slice = *maybeUserIllness.(*[]*UserIllness)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userIllnessR{}
		}
		if !queries.IsNil(object.UserID) {
			args = append(args, object.UserID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userIllnessR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserID) {
				args = append(args, obj.UserID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`user`), qm.WhereIn(`user_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userIllnessAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserIllnesses = append(foreign.R.UserIllnesses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.UserID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserIllnesses = append(foreign.R.UserIllnesses, local)
				break
			}
		}
	}

	return nil
}

// LoadVisits allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userIllnessL) LoadVisits(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserIllness interface{}, mods queries.Applicator) error {
	var slice []*UserIllness
	var object *UserIllness

	if singular {
		object = maybeUserIllness.(*UserIllness)
	} else {
		slice = *maybeUserIllness.(*[]*UserIllness)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userIllnessR{}
		}
		args = append(args, object.UserIllnessID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userIllnessR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserIllnessID) {
					continue Outer
				}
			}

			args = append(args, obj.UserIllnessID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`visit`), qm.WhereIn(`user_illness_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load visit")
	}

	var resultSlice []*Visit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice visit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on visit")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for visit")
	}

	if len(visitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Visits = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &visitR{}
			}
			foreign.R.UserIllness = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.UserIllnessID, foreign.UserIllnessID) {
				local.R.Visits = append(local.R.Visits, foreign)
				if foreign.R == nil {
					foreign.R = &visitR{}
				}
				foreign.R.UserIllness = local
				break
			}
		}
	}

	return nil
}

// SetDoctor of the userIllness to the related item.
// Sets o.R.Doctor to related.
// Adds o to related.R.UserIllnesses.
func (o *UserIllness) SetDoctor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Doctor) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_illness\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"doctor_id"}),
		strmangle.WhereClause("\"", "\"", 2, userIllnessPrimaryKeyColumns),
	)
	values := []interface{}{related.DoctorID, o.UserIllnessID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DoctorID, related.DoctorID)
	if o.R == nil {
		o.R = &userIllnessR{
			Doctor: related,
		}
	} else {
		o.R.Doctor = related
	}

	if related.R == nil {
		related.R = &doctorR{
			UserIllnesses: UserIllnessSlice{o},
		}
	} else {
		related.R.UserIllnesses = append(related.R.UserIllnesses, o)
	}

	return nil
}

// RemoveDoctor relationship.
// Sets o.R.Doctor to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *UserIllness) RemoveDoctor(ctx context.Context, exec boil.ContextExecutor, related *Doctor) error {
	var err error

	queries.SetScanner(&o.DoctorID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("doctor_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Doctor = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UserIllnesses {
		if queries.Equal(o.DoctorID, ri.DoctorID) {
			continue
		}

		ln := len(related.R.UserIllnesses)
		if ln > 1 && i < ln-1 {
			related.R.UserIllnesses[i] = related.R.UserIllnesses[ln-1]
		}
		related.R.UserIllnesses = related.R.UserIllnesses[:ln-1]
		break
	}
	return nil
}

// SetIllness of the userIllness to the related item.
// Sets o.R.Illness to related.
// Adds o to related.R.UserIllnesses.
func (o *UserIllness) SetIllness(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Illness) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_illness\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"illness_id"}),
		strmangle.WhereClause("\"", "\"", 2, userIllnessPrimaryKeyColumns),
	)
	values := []interface{}{related.IllnessID, o.UserIllnessID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IllnessID, related.IllnessID)
	if o.R == nil {
		o.R = &userIllnessR{
			Illness: related,
		}
	} else {
		o.R.Illness = related
	}

	if related.R == nil {
		related.R = &illnessR{
			UserIllnesses: UserIllnessSlice{o},
		}
	} else {
		related.R.UserIllnesses = append(related.R.UserIllnesses, o)
	}

	return nil
}

// RemoveIllness relationship.
// Sets o.R.Illness to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *UserIllness) RemoveIllness(ctx context.Context, exec boil.ContextExecutor, related *Illness) error {
	var err error

	queries.SetScanner(&o.IllnessID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("illness_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Illness = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UserIllnesses {
		if queries.Equal(o.IllnessID, ri.IllnessID) {
			continue
		}

		ln := len(related.R.UserIllnesses)
		if ln > 1 && i < ln-1 {
			related.R.UserIllnesses[i] = related.R.UserIllnesses[ln-1]
		}
		related.R.UserIllnesses = related.R.UserIllnesses[:ln-1]
		break
	}
	return nil
}

// SetUser of the userIllness to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserIllnesses.
func (o *UserIllness) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_illness\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userIllnessPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.UserIllnessID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.UserID)
	if o.R == nil {
		o.R = &userIllnessR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserIllnesses: UserIllnessSlice{o},
		}
	} else {
		related.R.UserIllnesses = append(related.R.UserIllnesses, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *UserIllness) RemoveUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.User = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UserIllnesses {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.UserIllnesses)
		if ln > 1 && i < ln-1 {
			related.R.UserIllnesses[i] = related.R.UserIllnesses[ln-1]
		}
		related.R.UserIllnesses = related.R.UserIllnesses[:ln-1]
		break
	}
	return nil
}

// AddVisits adds the given related objects to the existing relationships
// of the user_illness, optionally inserting them as new records.
// Appends related to o.R.Visits.
// Sets related.R.UserIllness appropriately.
func (o *UserIllness) AddVisits(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Visit) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.UserIllnessID, o.UserIllnessID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"visit\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_illness_id"}),
				strmangle.WhereClause("\"", "\"", 2, visitPrimaryKeyColumns),
			)
			values := []interface{}{o.UserIllnessID, rel.VisitID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.UserIllnessID, o.UserIllnessID)
		}
	}

	if o.R == nil {
		o.R = &userIllnessR{
			Visits: related,
		}
	} else {
		o.R.Visits = append(o.R.Visits, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &visitR{
				UserIllness: o,
			}
		} else {
			rel.R.UserIllness = o
		}
	}
	return nil
}

// SetVisits removes all previously related items of the
// user_illness replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.UserIllness's Visits accordingly.
// Replaces o.R.Visits with related.
// Sets related.R.UserIllness's Visits accordingly.
func (o *UserIllness) SetVisits(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Visit) error {
	query := "update \"visit\" set \"user_illness_id\" = null where \"user_illness_id\" = $1"
	values := []interface{}{o.UserIllnessID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Visits {
			queries.SetScanner(&rel.UserIllnessID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.UserIllness = nil
		}

		o.R.Visits = nil
	}
	return o.AddVisits(ctx, exec, insert, related...)
}

// RemoveVisits relationships from objects passed in.
// Removes related items from R.Visits (uses pointer comparison, removal does not keep order)
// Sets related.R.UserIllness.
func (o *UserIllness) RemoveVisits(ctx context.Context, exec boil.ContextExecutor, related ...*Visit) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.UserIllnessID, nil)
		if rel.R != nil {
			rel.R.UserIllness = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("user_illness_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Visits {
			if rel != ri {
				continue
			}

			ln := len(o.R.Visits)
			if ln > 1 && i < ln-1 {
				o.R.Visits[i] = o.R.Visits[ln-1]
			}
			o.R.Visits = o.R.Visits[:ln-1]
			break
		}
	}

	return nil
}

// UserIllnesses retrieves all the records using an executor.
func UserIllnesses(mods ...qm.QueryMod) userIllnessQuery {
	mods = append(mods, qm.From("\"user_illness\""))
	return userIllnessQuery{NewQuery(mods...)}
}

// FindUserIllness retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserIllness(ctx context.Context, exec boil.ContextExecutor, userIllnessID int, selectCols ...string) (*UserIllness, error) {
	userIllnessObj := &UserIllness{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_illness\" where \"user_illness_id\"=$1", sel,
	)

	q := queries.Raw(query, userIllnessID)

	err := q.Bind(ctx, exec, userIllnessObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_illness")
	}

	return userIllnessObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserIllness) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_illness provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userIllnessColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userIllnessInsertCacheMut.RLock()
	cache, cached := userIllnessInsertCache[key]
	userIllnessInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userIllnessAllColumns,
			userIllnessColumnsWithDefault,
			userIllnessColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userIllnessType, userIllnessMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userIllnessType, userIllnessMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_illness\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_illness\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_illness")
	}

	if !cached {
		userIllnessInsertCacheMut.Lock()
		userIllnessInsertCache[key] = cache
		userIllnessInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserIllness.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserIllness) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userIllnessUpdateCacheMut.RLock()
	cache, cached := userIllnessUpdateCache[key]
	userIllnessUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userIllnessAllColumns,
			userIllnessPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_illness, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_illness\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userIllnessPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userIllnessType, userIllnessMapping, append(wl, userIllnessPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_illness row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_illness")
	}

	if !cached {
		userIllnessUpdateCacheMut.Lock()
		userIllnessUpdateCache[key] = cache
		userIllnessUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userIllnessQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_illness")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_illness")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserIllnessSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userIllnessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_illness\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userIllnessPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userIllness slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userIllness")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserIllness) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_illness provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userIllnessColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userIllnessUpsertCacheMut.RLock()
	cache, cached := userIllnessUpsertCache[key]
	userIllnessUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userIllnessAllColumns,
			userIllnessColumnsWithDefault,
			userIllnessColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userIllnessAllColumns,
			userIllnessPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_illness, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userIllnessPrimaryKeyColumns))
			copy(conflict, userIllnessPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_illness\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userIllnessType, userIllnessMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userIllnessType, userIllnessMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_illness")
	}

	if !cached {
		userIllnessUpsertCacheMut.Lock()
		userIllnessUpsertCache[key] = cache
		userIllnessUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserIllness record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserIllness) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserIllness provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userIllnessPrimaryKeyMapping)
	sql := "DELETE FROM \"user_illness\" WHERE \"user_illness_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_illness")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_illness")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userIllnessQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userIllnessQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_illness")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_illness")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserIllnessSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userIllnessBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userIllnessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_illness\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userIllnessPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userIllness slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_illness")
	}

	if len(userIllnessAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserIllness) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserIllness(ctx, exec, o.UserIllnessID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserIllnessSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserIllnessSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userIllnessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_illness\".* FROM \"user_illness\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userIllnessPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserIllnessSlice")
	}

	*o = slice

	return nil
}

// UserIllnessExists checks if the UserIllness row exists.
func UserIllnessExists(ctx context.Context, exec boil.ContextExecutor, userIllnessID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_illness\" where \"user_illness_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, userIllnessID)
	}

	row := exec.QueryRowContext(ctx, sql, userIllnessID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_illness exists")
	}

	return exists, nil
}
